package com.javarush.task.task18.task1828;

/*
Прайсы 2
CrUD для таблицы внутри файла
Считать с консоли имя файла для операций CrUD

Программа запускается с одним из следующих наборов параметров:
-u id productName price quantity
-d id

Значения параметров:
где id - 8 символов
productName - название товара, 30 символов
price - цена, 8 символов
quantity - количество, 4 символа
-u - обновляет данные товара с заданным id
-d - производит физическое удаление товара с заданным id (все данные, которые относятся к переданному id)

В файле данные хранятся в следующей последовательности (без разделяющих пробелов):
id productName price quantity
Данные дополнены пробелами до их длины

Пример:
19847   Шорты пляжные синие           159.00  12
198479  Шорты пляжные черные с рисунко173.00  17
19847983Куртка для сноубордистов, разм10173.991234


Требования:
1. Программа должна считать имя файла для операций CrUD с консоли.
2. При запуске программы без параметров список товаров должен остаться неизменным.
3. При запуске программы с параметрами "-u id productName price quantity" должна обновится информация о товаре в файле.
4. При запуске программы с параметрами "-d id" строка товара с заданным id должна быть удалена из файла.
5. Созданные для файлов потоки должны быть закрыты.
*/

import java.io.*;
import java.util.*;

public class Solution {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        String fileName = sc.nextLine();
        sc.close();
        FileReader fr;
        BufferedReader reader;
        FileWriter fw;
        BufferedWriter writer;
        int id;
        String idStr;
        String productName;
        String price;
        String quantity;
        LinkedHashMap<Long, String> fromFile;
        String getStringsFromFile;
        switch (args[0]) {
            case "-c":

                fr = new FileReader(fileName);
                reader = new BufferedReader(fr);

                int maxId = 0;
                String idStrTemp = reader.readLine();
                while (idStrTemp != null) {


                    id = Integer.parseInt(idStrTemp.substring(0, 8).trim());
                    maxId = id >= maxId ? id : maxId;
                    idStrTemp = reader.readLine();
                }
                maxId++;

                fr.close();
                reader.close();

                idStr = String.format("%-8d", maxId);

                productName = String.format("%-30.30s", args[1]);

                price = String.format(Locale.ROOT, "%-8.2f", Double.parseDouble(args[2]));

                quantity = String.format("%-4d", Integer.parseInt(args[3]));
                String fin = idStr + productName + price + quantity;

                fw = new FileWriter(fileName, true);
                writer = new BufferedWriter(fw);
                writer.newLine();
                writer.write(fin);


                writer.close();
                break;
            case "-d":
                fr = new FileReader(fileName);
                reader = new BufferedReader(fr);

                fromFile = new LinkedHashMap<>();
                getStringsFromFile = reader.readLine();
                while (getStringsFromFile != null) {
                    String temp = getStringsFromFile.substring(0, 8).trim();
                    Long index = Long.parseLong(temp);

                    fromFile.put(index, getStringsFromFile);
                    getStringsFromFile = reader.readLine();
                }
                reader.close();
                fromFile.remove(Long.parseLong(args[1]));
                fw = new FileWriter(fileName);
                writer = new BufferedWriter(fw);
                for (Map.Entry<Long, String> pair : fromFile.entrySet()) {
                    writer.write(pair.getValue());
                    writer.newLine();
                }

                writer.close();
                break;
            case "-u":
                fr = new FileReader(fileName);
                reader = new BufferedReader(fr);


                fromFile = new LinkedHashMap<>();

                getStringsFromFile = reader.readLine();
                while (getStringsFromFile != null) {
                    String temp = getStringsFromFile.substring(0, 8).trim();
                    Long index = Long.parseLong(temp);

                    fromFile.put(index, getStringsFromFile);
                    getStringsFromFile = reader.readLine();
                }
                reader.close();
                idStr = String.format("%-8d", Integer.parseInt(args[1]));
                productName = String.format("%-30.30s", args[2]);

                price = String.format(Locale.ROOT, "%-8.2f", Double.parseDouble(args[3]));

                quantity = String.format("%-4d", Integer.parseInt(args[4]));
                String fin1 = idStr + productName + price + quantity;

                fromFile.replace(Long.parseLong(args[1]), fin1);
                fw = new FileWriter(fileName);
                writer = new BufferedWriter(fw);
                for (Map.Entry<Long, String> pair : fromFile.entrySet()) {
                    writer.write(pair.getValue());
                    writer.newLine();
                }

                writer.close();
                break;
        }
    }
}
