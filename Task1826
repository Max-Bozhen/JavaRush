package com.javarush.task.task18.task1826;

/* 
Шифровка
Придумать механизм шифровки/дешифровки.

Программа запускается с одним из следующих наборов параметров:
-e fileName fileOutputName
-d fileName fileOutputName

где:
fileName - имя файла, который необходимо зашифровать/расшифровать.
fileOutputName - имя файла, куда необходимо записать результат шифрования/дешифрования.
-e - ключ указывает, что необходимо зашифровать данные.
-d - ключ указывает, что необходимо расшифровать данные.


Требования:
1. Считывать с консоли ничего не нужно.
2. Создай поток для чтения из файла, который приходит вторым параметром ([fileName]).
3. Создай поток для записи в файл, который приходит третьим параметром ([fileOutputName]).
4. В режиме "-e" программа должна зашифровать [fileName] и записать в [fileOutputName].
5. В режиме "-d" программа должна расшифровать [fileName] и записать в [fileOutputName].
6. Созданные для файлов потоки должны быть закрыты.

*/

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

public class Solution {
    public static void main(String[] args) {
switch(args[0]){
    case "-e":
        try {
            Shifr(args[1], args[2]);
        } catch (IOException ie){

        }
        break;
    case "-d":
        try {
            DeShifr(args[1], args[2]);
        } catch (IOException ie){

        }
        break;
}
    }
    public static void Shifr(String fileName, String fileOutputName)throws IOException {
        FileInputStream fis = new FileInputStream(fileName);
        FileOutputStream fos = new FileOutputStream(fileOutputName);
        byte [] buffer = new byte[fis.available()];
        fis.read(buffer);
        fis.close();
        for (int i = 0; i<buffer.length; i++) {
            byte temp =2;
            buffer[i] += temp;
        }
        fos.write(buffer);
        fos.close();
    }
    public static void DeShifr(String fileName, String fileOutputName)throws IOException {
        FileInputStream fis = new FileInputStream(fileName);
        FileOutputStream fos = new FileOutputStream(fileOutputName);
        byte [] buffer = new byte[fis.available()];
        fis.read(buffer);
        fis.close();
        for (int i = 0; i<buffer.length; i++) {
            byte temp =2;
            buffer[i] -= temp;
        }
        fos.write(buffer);
        fos.close();
    }

}
